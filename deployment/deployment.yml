# proxy.name: kubernetes-dashboard
# upstream: http://kubernetes-dashboard:80/
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: jobson-ui
spec:
  replicas: 1
  revisionHistoryLimit: 3
  minReadySeconds: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: overseer
        component: jobson-ui
    spec:
      containers:
      - name: jobson-ui
        image: "${image}"
        env:
          - name: JOBSON_SERVER
            value: jobson:8080
        ports:
          - name: http
            containerPort: 8080
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 100m
            memory: 100Mi
      imagePullSecrets:
      - name: docker-hub-private-registry
---
apiVersion: v1
kind: Service
metadata:
  name: jobson-ui
  labels:
    component: jobson-ui
spec:
  selector:
    component: jobson-ui
  ports:
  - port: 8080
    name: http
    protocol: TCP

---


apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: "overseer-oauth2"
  labels:
    app: "overseer"
    component: "overseer-oauth2"
  annotations:
    kubernetes.io/ingress.class: nginx
    # ingress.kubernetes.io/rewrite-target: /
    # Add to generate certificates for this ingress
    kubernetes.io/tls-acme: 'true'

spec:
  rules:
    - host: "${host}"
      http:
        paths:
        - path: /
          backend:
            serviceName: "overseer-oauth2"
            servicePort: 4180
  tls:
    # With this configuration kube-lego will generate a secret in namespace foo called `example-tls`
    # for the URL `www.example.com`
    - hosts:
        - "${host}"
      secretName: "${host}.tls"
---
apiVersion: v1
kind: Service
metadata:
  name: "overseer-oauth2"
  labels:
    app: "overseer"
    component: "overseer-oauth2"
spec:
  selector:
    app: "overseer"
    component: "overseer-oauth2"
  ports:
  - port: 4180
    name: http
    protocol: TCP
---
# proxy.name: kubernetes-dashboard
# upstream: http://kubernetes-dashboard:80/
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: "overseer-oauth2"
spec:
  replicas: 1
  revisionHistoryLimit: 3
  minReadySeconds: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: "overseer"
        component: "overseer-oauth2"
    spec:
      containers:
      - name: oauth2-proxy
        image: a5huynh/oauth2_proxy:2.1 # https://github.com/bitly/oauth2_proxy
        args:
          - "-provider=google"
          - "-upstream=http://jobson-ui:8080"
          - "-http-address=0.0.0.0:4180"
          - "-config=/etc/oauth2_proxy/config/oauth2_proxy.cfg"
          - "-google-service-account-json=/etc/oauth2_proxy/json/google-service-account.json"
          - "-google-admin-email=oauth@automat.ai"
          - "-google-group=oauth.staging.conversation-optimization@automat.ai"
        env:
          - name: OAUTH2_PROXY_COOKIE_SECRET
            valueFrom:
              secretKeyRef:
                name: google-oauth-client
                key: cookie-secret
          - name: OAUTH2_PROXY_CLIENT_ID
            valueFrom:
              secretKeyRef:
                name: google-oauth-client
                key: client-id
          - name: OAUTH2_PROXY_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: google-oauth-client
                key: client-secret
        ports:
          - name: http
            containerPort: 4180
        resources:
          requests:
            cpu: 50m
            memory: 30Mi
          limits:

        volumeMounts:
        - name: oauth2-proxy-config
          mountPath: /etc/oauth2_proxy/config
        - name: google-service-account-json
          mountPath: /etc/oauth2_proxy/json
        # - name: oauth2-proxy-htpasswd
        #   mountPath: /etc/oauth2_proxy/passwords
      volumes:
      - name: oauth2-proxy-config
        configMap:
          name: "overseer-oauth2"
          items:
            - key: oauth2_proxy.cfg
              path: oauth2_proxy.cfg
      - name: google-service-account-json
        configMap:
          name: google-service-account
          items:
            - key: google-service-account.json
              path: google-service-account.json
              mode: 0644
      # - name: oauth2-proxy-htpasswd
      #   secret:
      #     secretName: some-secret
      #     items:
      #     - key: htpasswd
      #       path: .htpasswd
      #       mode: 0644
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: "overseer-oauth2"
  labels:
    app: "overseer"
    component: "overseer-oauth2"
data:
  oauth2_proxy.cfg: |
    ## OAuth2 Proxy Config File
    cookie_name = "_oauth2_proxy"
    cookie_domain = "${host}"
    cookie_expire = "1h"
    cookie_refresh = "15m"
    cookie_httponly = true
    cookie_secure = true
    email_domains = [
      "automat.ai"
    ]
    ## the OAuth Redirect URL.
    # defaults to the "https://" + requested host header + "/oauth2/callback"
    # redirect_url = "https://internalapp.yourcompany.com/oauth2/callback"
    ## Authenticated Email Addresses File (one email per line)
    # authenticated_emails_file = ""
    ## Htpasswd File (optional)
    ## Additionally authenticate against a htpasswd file. Entries must be created with "htpasswd -s" for SHA encryption
    ## enabling exposes a username/login signin form
    # htpasswd_file = "/etc/oauth2_proxy/passwords/.htpasswd"
